// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_CONNECTION")
}

model User {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  sub String

  companies UserCompany[]
  orders    Order[]
}

model Company {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  isDeleted Boolean? @default(false)

  users    UserCompany[]
  policies Policy[]
}

model UserCompany {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId

  isAdmin Boolean @default(false)
}

model Policy {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  slug        String
  version     Int       @default(1)
  name        String
  description String
  price       Float
  options     String[]
  isDeleted   Boolean?  @default(false)
  deletedAt   DateTime?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @db.ObjectId

  category   PolicyCategory @relation(fields: [categoryId], references: [id])
  categoryId String         @db.ObjectId

  orders Order[]

  @@unique([companyId, slug, version])
}

model PolicyCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String
  isDeleted   Boolean? @default(false)

  fields   Json?
  policies Policy[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  status OrderStatus @default(PENDING)

  policy          Policy @relation(fields: [policyCompanyId, policySlug, policyVersion], references: [companyId, slug, version])
  policyCompanyId String @db.ObjectId
  policySlug      String
  policyVersion   Int

  price Float?

  informations OrderInformation[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderInformation {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String
  value Json

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId
}
